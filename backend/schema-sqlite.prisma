generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Simplified models for SQLite development
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  emailVerified Boolean @default(false)
  name         String?
  role         String   @default("OWNER")
  
  // Auth relationships
  accounts Account[]
  sessions Session[]
  
  // Org relationships
  createdOrgs      Organization[]  @relation("OrganizationCreator")
  memberships      Membership[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  createdById String
  
  createdBy   User         @relation("OrganizationCreator", fields: [createdById], references: [id])
  memberships Membership[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Membership {
  id     String @id @default(cuid())
  userId String
  orgId  String
  role   String @default("OWNER")

  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  org  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, orgId])
}

model Account {
  id                     String  @id @default(cuid())
  accountId              String
  userId                 String
  providerId             String
  providerAccountId      String?
  type                   String  @default("oauth")
  refreshToken           String?
  accessToken            String?
  accessTokenExpiresAt   DateTime?
  expires_at             Int?
  token_type             String?
  scope                  String?
  idToken                String?
  session_state          String?
  password               String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  token        String   @unique
  userId       String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ipAddress    String?
  userAgent    String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}