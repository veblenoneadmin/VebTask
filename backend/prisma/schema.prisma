generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(cuid()) @db.VarChar(36)
  email            String      @unique(map: "email") @db.VarChar(255)
  emailVerified    Boolean?    @default(false)
  name             String?     @db.VarChar(255)
  image            String?     @db.VarChar(255)
  createdAt        DateTime?   @default(now()) @db.Timestamp(0)
  updatedAt        DateTime?   @default(now()) @updatedAt @db.Timestamp(0)
  completedWizards String?     @db.Text

  // Relations
  memberships      Membership[]
  macroTasks       MacroTask[]
}

model Organization {
  id          String       @id @default(cuid())
  name        String       @db.VarChar(255)
  slug        String       @unique @db.VarChar(100)
  createdById String       @db.VarChar(191)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  invites     Invite[]
  memberships Membership[]
  macroTasks  MacroTask[]

  @@index([createdById])
  @@map("organizations")
}

model Membership {
  id        String       @id @default(cuid())
  userId    String
  orgId     String
  role      Role
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
  @@index([orgId])
  @@index([userId])
  @@map("memberships")
}

model Invite {
  id           String       @id @default(cuid())
  orgId        String
  email        String       @db.VarChar(255)
  role         Role
  token        String       @unique @db.VarChar(64)
  expiresAt    DateTime
  status       InviteStatus @default(PENDING)
  invitedById  String
  acceptedById String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  org          Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([token])
  @@index([email])
  @@index([acceptedById], map: "invites_acceptedById_fkey")
  @@index([invitedById], map: "invites_invitedById_fkey")
  @@map("invites")
}

model Account {
  id                   String    @id @default(cuid())
  accountId            String
  userId               String?   @db.VarChar(36)
  providerId           String
  providerAccountId    String?
  type                 String    @default("oauth")
  expires_at           Int?
  token_type           String?
  scope                String?
  session_state        String?
  password             String?   @db.Text
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  accessToken          String?   @db.Text
  accessTokenExpiresAt DateTime?
  idToken              String?   @db.Text
  refreshToken         String?   @db.Text

  @@unique([providerId, providerAccountId])
  @@index([userId])
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String?  @db.VarChar(36)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  @@index([userId])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String   @db.VarChar(255)
  value      String   @db.Text
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model MacroTask {
  id             String    @id @default(cuid()) @db.VarChar(50)
  title          String    @db.VarChar(500)
  description    String?   @db.Text
  userId         String    @db.VarChar(36)
  orgId          String
  createdBy      String    @db.VarChar(36)
  priority       String    @default("Medium") @db.VarChar(10)
  estimatedHours Decimal   @default(0.00) @db.Decimal(5, 2)
  actualHours    Decimal   @default(0.00) @db.Decimal(5, 2)
  status         String    @default("not_started") @db.VarChar(20)
  category       String    @default("General") @db.VarChar(100)
  tags           Json?
  dueDate        DateTime?
  completedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt

  // Relations
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  org            Organization  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  timeLogs       TimeLog[]

  @@index([userId, status])
  @@index([orgId])
  @@index([priority])
  @@index([dueDate])
  @@fulltext([title, description], map: "title")
  @@map("macro_tasks")
}

model TimeLog {
  id          String    @id @default(cuid()) @db.VarChar(50)
  taskId      String?   @db.VarChar(50)
  userId      String    @db.VarChar(36)
  orgId       String
  begin       DateTime
  end         DateTime?
  duration    Int       @default(0)
  timezone    String    @default("UTC") @db.VarChar(64)
  category    String    @default("work") @db.VarChar(20)
  description String?   @db.Text
  isBillable  Boolean   @default(false)
  hourlyRate  Decimal?  @db.Decimal(10, 2)
  earnings    Decimal?  @db.Decimal(10, 2)
  isExported  Boolean   @default(false)
  exportedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  // Relations
  task        MacroTask? @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([userId, begin])
  @@index([begin, end])
  @@index([orgId])
  @@index([taskId])
  @@map("time_logs")
}

model CalendarEvent {
  id               String   @id @default(cuid()) @db.VarChar(50)
  userId           String   @db.VarChar(36)
  orgId            String
  title            String   @db.VarChar(500)
  description      String?  @db.Text
  startTime        DateTime
  endTime          DateTime
  type             String   @default("task") @db.VarChar(20)
  taskId           String?  @db.VarChar(50)
  color            String   @default("#6366f1") @db.VarChar(20)
  location         String?  @db.VarChar(255)
  attendees        Json?
  isRecurring      Boolean  @default(false)
  recurringPattern Json?
  status           String   @default("scheduled") @db.VarChar(20)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt

  @@index([userId, startTime, endTime])
  @@index([orgId])
  @@index([taskId])
  @@index([type])
  @@map("calendar_events")
}

model Project {
  id              String   @id @default(cuid())
  name            String   @db.VarChar(255)
  description     String?  @db.Text
  status          String   @default("planning") @db.VarChar(20) // planning, active, on_hold, completed, cancelled
  priority        String   @default("medium") @db.VarChar(10)   // low, medium, high
  color           String   @default("#646cff") @db.VarChar(20)
  budget          Decimal? @db.Decimal(10, 2)
  spent           Decimal  @default(0.00) @db.Decimal(10, 2)
  progress        Int      @default(0)
  estimatedHours  Int      @default(0)
  hoursLogged     Int      @default(0)
  startDate       DateTime?
  endDate         DateTime?
  clientId        String?
  clientName      String?  @db.VarChar(255)
  orgId           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  client          Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
  
  @@index([orgId])
  @@index([status])
  @@index([priority])
  @@index([clientId])
  @@map("projects")
}

model Client {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(255)
  email     String?   @db.VarChar(255)
  phone     String?   @db.VarChar(50)
  address   String?   @db.Text
  orgId     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  projects  Project[]
  
  @@index([orgId])
  @@map("clients")
}

enum Role {
  OWNER
  ADMIN
  STAFF
  CLIENT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}
